C:\Users\dorot\Documents\36finalproject.lst - generated by MGTEK Assembler ASM12 V1.26 Build 144 for WIN32 (x86) - Tue Dec 20 23:37:10 2022

    1:                                 ; This assembly program implements a digital thermometer using the LM45 thermistor on the Dragon12 board. The temperature in Celsius is displayed on the LCD screen.
    2:                                 ; The ATD result is multiplied with 3/2 and then added 4 for converting to degree Celsius.  
    3:                                 ; (X°C × 9/5) + 32 = Y°F
    4:                                 ; X°C + 273 = Y(K)
    5:                                 ; add subroutine to convert to farenheit and kelvin
    6:                                 ; add subroutine to read the status of pushbutton
    7:                                 ; if pushbutton 0 is pressed
    8:                                 ;
    9:                                 
   10:                                 #include "reg9s12.h"
    1:                                 *
    2:                                 *
    3:                                 *  HC12 I/O register locations (9s12dp256)
    4:                                 *
    5:                                 *
    6:          =00000000              porta:          equ 0   ;port a = address lines a8 - a15
    7:          =00000001              portb:          equ 1   ;port b = address lines a0 - a7
    8:          =00000002              ddra:           equ 2   ;port a direction register
    9:          =00000003              ddrb:           equ 3   ;port a direction register
   10:                                 
   11:          =00000008              porte:          equ 8   ;port e = mode,irqandcontrolsignals
   12:          =00000009              ddre:           equ 9   ;port e direction register
   13:          =0000000A              pear:           equ $a  ;port e assignments
   14:          =0000000B              mode:           equ $b  ;mode register
   15:          =0000000C              pucr:           equ $c  ;port pull-up control register
   16:          =0000000D              rdriv:          equ $d  ;port reduced drive control register
   17:          =0000000E              ebictl:         equ $e  ;e stretch control
   18:                                 
   19:          =00000010              initrm:         equ $10 ;ram location register
   20:          =00000011              initrg:         equ $11 ;register location register
   21:          =00000012              initee:         equ $12 ;eeprom location register
   22:          =00000013              misc:           equ $13 ;miscellaneous mapping control
   23:          =00000014              mtst0:          equ $14 ; reserved
   24:          =00000015              itcr:           equ $15 ;interrupt test control register
   25:          =00000016              itest:          equ $16 ;interrupt test register
   26:          =00000017              mtst1:          equ $17 ; reserved
   27:                                 
   28:          =0000001A              partidh:        equ $1a ;part id high
   29:          =0000001B              partidl:        equ $1b ;part id low
   30:          =0000001C              memsiz0:        equ $1c ;memory size
   31:          =0000001D              memsiz1:        equ $1d ;memory size
   32:          =0000001E              intcr:          equ $1e ;interrupt control register
   33:          =0000001F              hprio:          equ $1f ;high priority reg
   34:                                 
   35:          =00000028              bkpct0:         equ $28 ;break control register
   36:          =00000029              bkpct1:         equ $29 ;break control register
   37:          =0000002A              bkp0x:          equ $2a ; break 0 index register
   38:          =0000002B              bkp0h:          equ $2b ; break 0 pointer high
   39:          =0000002C              brp0l:          equ $2c ; break 0 pointer low
   40:          =0000002D              bkp1x:          equ $2d ; break 1 index register
   41:          =0000002E              bkp1h:          equ $2e ; break 1 pointer high
   42:          =0000002F              brp1l:          equ $2f ; break 1 pointer low
   43:          =00000030              ppage:          equ $30 ;program page register
   44:                                 
   45:          =00000032              portk:          equ $32 ;port k data
   46:          =00000033              ddrk:           equ $33 ;port k direction
   47:          =00000034              synr:           equ $34 ; synthesizer / multiplier register
   48:          =00000035              refdv:          equ $35 ; reference divider register
   49:          =00000036              ctflg:          equ $36 ; reserved
   50:          =00000037              crgflg:         equ $37 ; pll flags register
   51:          =00000038              crgint:         equ $38 ; pll interrupt register
   52:          =00000039              clksel:         equ $39 ; clock select register
   53:          =0000003A              pllctl:         equ $3a ; pll control register
   54:          =0000003B              rtictl:         equ $3b ;real time interrupt control
   55:          =0000003C              copctl:         equ $3c ;watchdog control
   56:          =0000003D              forbyp:         equ $3d ;
   57:          =0000003E              ctctl:          equ $3e ;
   58:          =0000003F              armcop:         equ $3f ;cop reset register
   59:                                 
   60:          =00000040              tios:           equ $40 ;timer input/output select
   61:          =00000041              cforc:          equ $41 ;timer compare force
   62:          =00000042              oc7m:           equ $42 ;timer output compare 7 mask
   63:          =00000043              oc7d:           equ $43 ;timer output compare 7 data
   64:          =00000044              tcnt:           equ $44 ;timer counter register hi
   65:                                 *tcnt:          equ $45 ;timer counter register lo
   66:          =00000046              tscr:           equ $46 ;timer system control register
   67:          =00000046              tscr1:           equ $46 ;timer system control register
   68:          =00000047              ttov:           equ $47 ;reserved
   69:          =00000048              tctl1:          equ $48 ;timer control register 1
   70:          =00000049              tctl2:          equ $49 ;timer control register 2
   71:          =0000004A              tctl3:          equ $4a ;timer control register 3
   72:          =0000004B              tctl4:          equ $4b ;timer control register 4
   73:          =0000004C              tmsk1:       equ $4c ;timer interrupt mask 1
   74:          =0000004C              tie:             equ $4c ;timer interrupt mask 1
   75:          =0000004D              tmsk2:       equ $4d ;timer interrupt mask 2
   76:          =0000004D              tscr2:         equ $4d ;timer interrupt mask 2
   77:          =0000004E              tflg1:          equ $4e ;timer flags 1
   78:          =0000004F              tflg2:          equ $4f ;timer flags 2
   79:          =00000050              tc0:            equ $50 ;timer capture/compare register 0
   80:          =00000052              tc1:            equ $52 ;timer capture/compare register 1
   81:          =00000054              tc2:            equ $54 ;timer capture/compare register 2
   82:          =00000056              tc3:            equ $56 ;timer capture/compare register 3
   83:          =00000058              tc4:            equ $58 ;timer capture/compare register 4
   84:          =0000005A              tc5:            equ $5a ;timer capture/compare register 5
   85:          =0000005C              tc6:            equ $5c ;timer capture/compare register 6
   86:          =0000005E              tc7:            equ $5e ;timer capture/compare register 7
   87:          =00000060              pactl:          equ $60 ;pulse accumulator controls
   88:          =00000061              paflg:          equ $61 ;pulse accumulator flags
   89:          =00000062              pacn3:          equ $62 ;pulse accumulator counter 3
   90:          =00000063              pacn2:          equ $63 ;pulse accumulator counter 2
   91:          =00000064              pacn1:          equ $64 ;pulse accumulator counter 1
   92:          =00000065              pacn0:          equ $65 ;pulse accumulator counter 0
   93:          =00000066              mcctl:          equ $66 ;modulus down conunter control
   94:          =00000067              mcflg:          equ $67 ;down counter flags
   95:          =00000068              icpar:          equ $68 ;input pulse accumulator control
   96:          =00000069              dlyct:          equ $69 ;delay count to down counter
   97:          =0000006A              icovw:          equ $6a ;input control overwrite register
   98:          =0000006B              icsys:          equ $6b ;input control system control
   99:                                 
  100:          =0000006D              timtst:         equ $6d ;timer test register
  101:                                 
  102:          =00000070              pbctl:          equ $70 ; pulse accumulator b control
  103:          =00000071              pbflg:          equ $71 ; pulse accumulator b flags
  104:          =00000072              pa3h:           equ $72 ; pulse accumulator holding register 3
  105:          =00000073              pa2h:           equ $73 ; pulse accumulator holding register 2
  106:          =00000074              pa1h:           equ $74 ; pulse accumulator holding register 1
  107:          =00000075              pa0h:           equ $75 ; pulse accumulator holding register 0
  108:          =00000076              mccnt:          equ $76 ; modulus down counter register
  109:                                 *mccntl:        equ $77 ; low byte
  110:          =00000078              tcoh:           equ $78 ; capture 0 holding register
  111:          =0000007A              tc1h:           equ $7a ; capture 1 holding register
  112:          =0000007C              tc2h:           equ $7c ; capture 2 holding register
  113:          =0000007E              tc3h:           equ $7e ; capture 3 holding register
  114:                                 
  115:          =00000080              atd0ctl0:       equ $80 ;adc control 0 (reserved)
  116:          =00000081              atd0ctl1:       equ $81 ;adc control 1 (reserved)
  117:          =00000082              atd0ctl2:       equ $82 ;adc control 2
  118:          =00000083              atd0ctl3:       equ $83 ;adc control 3
  119:          =00000084              atd0ctl4:       equ $84 ;adc control 4
  120:          =00000085              atd0ctl5:       equ $85 ;adc control 5
  121:          =00000086              atd0stat:       equ $86 ;adc status register hi
  122:                                 *atd0stat       equ $87 ;adc status register lo
  123:          =00000088              atd0test:       equ $88 ;adc test (reserved)
  124:                                 *atd0test       equ $89 ;
  125:                                 
  126:          =0000008D              atd0dien:       equ $8d ;
  127:                                 
  128:          =0000008F              portad:         equ $8f ;port adc = input only
  129:          =00000090              adr00h:         equ $90 ;adc result 0 register
  130:          =00000092              adr01h:         equ $92 ;adc result 1 register
  131:          =00000094              adr02h:         equ $94 ;adc result 2 register
  132:          =00000096              adr03h:         equ $96 ;adc result 3 register
  133:          =00000098              adr04h:         equ $98 ;adc result 4 register
  134:          =0000009A              adr05h:         equ $9a ;adc result 5 register
  135:          =0000009C              adr06h:         equ $9c ;adc result 6 register
  136:          =0000009E              adr07h:         equ $9e ;adc result 7 register
  137:                                 
  138:          =000000A0              pwme:           equ $a0 ;pwm enable
  139:          =000000A1              pwmpol:         equ $a1 ;pwm polarity
  140:          =000000A2              pwmclk:         equ $a2 ;pwm clock select register
  141:          =000000A3              pwmprclk:       equ $a3 ;pwm prescale clock select register
  142:          =000000A4              pwmcae:         equ $a4 ;pwm center align select register
  143:          =000000A5              pwmctl:         equ $a5 ;pwm control register
  144:          =000000A6              pwmtst:         equ $a6 ;reserved
  145:          =000000A7              pwmprsc:        equ $a7 ;reserved
  146:          =000000A8              pwmscla:        equ $a8 ;pwm scale a
  147:          =000000A9              pwmsclb:        equ $a9 ;pwm scale b
  148:          =000000AA              pwmscnta:       equ $aa ;reserved
  149:          =000000AB              pwmscntb:       equ $ab ;reserved
  150:          =000000AC              pwmcnt0:        equ $ac ;pwm channel 0 counter
  151:          =000000AD              pwmcnt1:        equ $ad ;pwm channel 1 counter
  152:          =000000AE              pwmcnt2:        equ $ae ;pwm channel 2 counter
  153:          =000000AF              pwmcnt3:        equ $af ;pwm channel 3 counter
  154:          =000000B0              pwmcnt4:        equ $b0 ;pwm channel 4 counter
  155:          =000000B1              pwmcnt5:        equ $b1 ;pwm channel 5 counter
  156:          =000000B2              pwmcnt6:        equ $b2 ;pwm channel 6 counter
  157:          =000000B3              pwmcnt7:        equ $b3 ;pwm channel 7 counter
  158:          =000000B4              pwmper0:        equ $b4 ;pwm channel 0 period
  159:          =000000B5              pwmper1:        equ $b5 ;pwm channel 1 period
  160:          =000000B6              pwmper2:        equ $b6 ;pwm channel 2 period
  161:          =000000B7              pwmper3:        equ $b7 ;pwm channel 3 period
  162:          =000000B8              pwmper4:        equ $b8 ;pwm channel 4 period
  163:          =000000B9              pwmper5:        equ $b9 ;pwm channel 5 period
  164:          =000000BA              pwmper6:        equ $ba ;pwm channel 6 period
  165:          =000000BB              pwmper7:        equ $bb ;pwm channel 7 period
  166:          =000000BC              pwmdty0:        equ $bc ;pwm channel 0 duty cycle
  167:          =000000BD              pwmdty1:        equ $bd ;pwm channel 1 duty cycle
  168:          =000000BE              pwmdty2:        equ $be ;pwm channel 2 duty cycle
  169:          =000000BF              pwmdty3:        equ $bf ;pwm channel 3 duty cycle
  170:          =000000C0              pwmdty4:        equ $c0 ;pwm channel 0 duty cycle
  171:          =000000C1              pwmdty5:        equ $c1 ;pwm channel 1 duty cycle
  172:          =000000C2              pwmdty6:        equ $c2 ;pwm channel 2 duty cycle
  173:          =000000C3              pwmdty7:        equ $c3 ;pwm channel 3 duty cycle
  174:          =000000C4              pwmsdn:         equ $c4 ;pwm shutdown register
  175:                                 
  176:          =000000C8              sc0bdh:         equ $c8 ;sci 0 baud reg hi byte
  177:          =000000C9              sc0bdl:         equ $c9 ;sci 0 baud reg lo byte
  178:          =000000CA              sc0cr1:         equ $ca ;sci 0 control1 reg
  179:          =000000CB              sc0cr2:         equ $cb ;sci 0 control2 reg
  180:          =000000CC              sc0sr1:         equ $cc ;sci 0 status reg 1
  181:          =000000CD              sc0sr2:         equ $cd ;sci 0 status reg 2
  182:          =000000CE              sc0drh:         equ $ce ;sci 0 data reg hi
  183:          =000000CF              sc0drl:         equ $cf ;sci 0 data reg lo
  184:          =000000D0              sc1bdh:         equ $d0 ;sci 1 baud reg hi byte
  185:          =000000D1              sc1bdl:         equ $d1 ;sci 1 baud reg lo byte
  186:          =000000D2              sc1cr1:         equ $d2 ;sci 1 control1 reg
  187:          =000000D3              sc1cr2:         equ $d3 ;sci 1 control2 reg
  188:          =000000D4              sc1sr1:         equ $d4 ;sci 1 status reg 1
  189:          =000000D5              sc1sr2:         equ $d5 ;sci 1 status reg 2
  190:          =000000D6              sc1drh:         equ $d6 ;sci 1 data reg hi
  191:          =000000D7              sc1drl:         equ $d7 ;sci 1 data reg lo
  192:          =000000D8              spi0cr1:        equ $d8 ;spi 0 control1 reg
  193:          =000000D9              spi0cr2:        equ $d9 ;spi 0 control2 reg
  194:          =000000DA              spi0br:         equ $da ;spi 0 baud reg
  195:          =000000DB              spi0sr:         equ $db ;spi 0 status reg hi
  196:                                 
  197:          =000000DD              sp0dr:          equ $dd ;spi 0 data reg
  198:                                 
  199:          =000000E0              ibad:           equ $e0 ;i2c bus address register
  200:          =000000E1              ibfd:           equ $e1 ;i2c bus frequency divider
  201:          =000000E2              ibcr:           equ $e2 ;i2c bus control register
  202:          =000000E3              ibsr:           equ $e3 ;i2c bus status register
  203:          =000000E4              ibdr:           equ $e4 ;i2c bus message data register
  204:                                 
  205:          =000000E8              dlcbcr1:        equ $e8 ;bdlc control regsiter 1
  206:          =000000E9              dlcbsvr:        equ $e9 ;bdlc state vector register
  207:          =000000EA              dlcbcr2:        equ $ea ;bdlc control register 2
  208:          =000000EB              dlcbdr:         equ $eb ;bdlc data register
  209:          =000000EC              dlcbard:        equ $ec ;bdlc analog delay register
  210:          =000000ED              dlcbrsr:        equ $ed ;bdlc rate select register
  211:          =000000EE              dlcscr:         equ $ee ;bdlc control register
  212:          =000000EF              dlcbstat:       equ $ef ;bdlc status register
  213:          =000000F0              spi1cr1:        equ $f0 ;spi 1 control1 reg
  214:          =000000F1              spi1cr2:        equ $f1 ;spi 1 control2 reg
  215:          =000000F2              spi1br:         equ $f2 ;spi 1 baud reg
  216:          =000000F3              spi1sr:         equ $f3 ;spi 1 status reg hi
  217:                                 
  218:          =000000F5              sp1dr:          equ $f5 ;spi 1 data reg
  219:                                 
  220:          =000000F8              spi2cr1:        equ $f8 ;spi 2 control1 reg
  221:          =000000F9              spi2cr2:        equ $f9 ;spi 2 control2 reg
  222:          =000000FA              spi2br:         equ $fa ;spi 2 baud reg
  223:          =000000FB              spi2sr:         equ $fb ;spi 2 status reg hi
  224:                                 
  225:          =000000FD              sp2dr:          equ $fd ;spi 2 data reg
  226:                                 
  227:          =00000100              fclkdiv:        equ $100 ;flash clock divider
  228:          =00000101              fsec:           equ $101 ;flash security register
  229:                                 
  230:          =00000103              fcnfg:          equ $103 ;flash configuration register
  231:          =00000104              fprot:          equ $104 ;flash protection register
  232:          =00000105              fstat:          equ $105 ;flash status register
  233:          =00000106              fcmd:           equ $106 ;flash command register
  234:                                 
  235:          =00000110              eclkdiv:        equ $110 ;eeprom clock divider
  236:                                 
  237:          =00000113              ecnfg:          equ $113 ;eeprom configuration register
  238:          =00000114              eprot:          equ $114 ;eeprom protection register
  239:          =00000115              estat:          equ $115 ;eeprom status register
  240:          =00000116              ecmd:           equ $116 ;eeprom command register
  241:                                 
  242:          =00000120              atd1ctl0:       equ $120 ;adc1 control 0 (reserved)
  243:          =00000121              atd1ctl1:       equ $121 ;adc1 control 1 (reserved)
  244:          =00000122              atd1ctl2:       equ $122 ;adc1 control 2
  245:          =00000123              atd1ctl3:       equ $123 ;adc1 control 3
  246:          =00000124              atd1ctl4:       equ $124 ;adc1 control 4
  247:          =00000125              atd1ctl5:       equ $125 ;adc1 control 5
  248:          =00000126              atd1stat:       equ $126 ;adc1 status register hi
  249:                                 *atd1stat       equ $127 ;adc1 status register lo
  250:          =00000128              atd1test:       equ $128 ;adc1 test (reserved)
  251:                                 *atd1test       equ $129 ;
  252:                                 
  253:          =0000012D              atddien:        equ $12d ;adc1 input enable register
  254:                                 
  255:          =0000012F              portad1:        equ $12f ;port adc1 = input only
  256:          =00000130              adr10h:         equ $130 ;adc1 result 0 register
  257:          =00000132              adr11h:         equ $132 ;adc1 result 1 register
  258:          =00000134              adr12h:         equ $134 ;adc1 result 2 register
  259:          =00000136              adr13h:         equ $136 ;adc1 result 3 register
  260:          =00000138              adr14h:         equ $138 ;adc1 result 4 register
  261:          =0000013A              adr15h:         equ $13a ;adc1 result 5 register
  262:          =0000013C              adr16h:         equ $13c ;adc1 result 6 register
  263:          =0000013E              adr17h:         equ $13e ;adc1 result 7 register
  264:          =00000140              can0ctl0:       equ $140 ;can0 control register 0
  265:          =00000141              can0ctl1:       equ $141 ;can0 control register 1
  266:          =00000142              can0btr0:       equ $142 ;can0 bus timing register 0
  267:          =00000143              can0btr1:       equ $143 ;can0 bus timing register 1
  268:          =00000144              can0rflg:       equ $144 ;can0 receiver flags
  269:          =00000145              can0rier:       equ $145 ;can0 receiver interrupt enables
  270:          =00000146              can0tflg:       equ $146 ;can0 transmit flags
  271:          =00000147              can0tier:       equ $147 ;can0 transmit interrupt enables
  272:          =00000148              can0tarq:       equ $148 ;can0 transmit message abort control
  273:          =00000149              can0taak:       equ $149 ;can0 transmit message abort status
  274:          =0000014A              can0tbel:       equ $14a ;can0 transmit buffer select
  275:          =0000014B              can0idac:       equ $14b ;can0 identfier acceptance control
  276:                                 
  277:          =0000014E              can0rerr:       equ $14e ;can0 receive error counter
  278:          =0000014F              can0terr:       equ $14f ;can0 transmit error counter
  279:          =00000150              can0ida0:       equ $150 ;can0 identifier acceptance register 0
  280:          =00000151              can0ida1:       equ $151 ;can0 identifier acceptance register 1
  281:          =00000152              can0ida2:       equ $152 ;can0 identifier acceptance register 2
  282:          =00000153              can0ida3:       equ $153 ;can0 identifier acceptance register 3
  283:          =00000154              can0idm0:       equ $154 ;can0 identifier mask register 0
  284:          =00000155              can0idm1:       equ $155 ;can0 identifier mask register 1
  285:          =00000156              can0idm2:       equ $156 ;can0 identifier mask register 2
  286:          =00000157              can0idm3:       equ $157 ;can0 identifier mask register 3
  287:          =00000158              can0ida4:       equ $158 ;can0 identifier acceptance register 4
  288:          =00000159              can0ida5:       equ $159 ;can0 identifier acceptance register 5
  289:          =0000015A              can0ida6:       equ $15a ;can0 identifier acceptance register 6
  290:          =0000015B              can0ida7:       equ $15b ;can0 identifier acceptance register 7
  291:          =0000015C              can0idm4:       equ $15c ;can0 identifier mask register 4
  292:          =0000015D              can0idm5:       equ $15d ;can0 identifier mask register 5
  293:          =0000015E              can0idm6:       equ $15e ;can0 identifier mask register 6
  294:          =0000015F              can0idm7:       equ $15f ;can0 identifier mask register 7
  295:          =00000160              can0rxfg:       equ $160 ;can0 rx foreground buffer thru +$16f
  296:          =00000170              can0txfg:       equ $170 ;can0 tx foreground buffer thru +$17f
  297:                                 
  298:          =00000180              can1ctl0:       equ $180 ;can1 control register 0
  299:          =00000181              can1ctl1:       equ $181 ;can1 control register 1
  300:          =00000182              can1btr0:       equ $182 ;can1 bus timing register 0
  301:          =00000183              can1btr1:       equ $183 ;can1 bus timing register 1
  302:          =00000184              can1rflg:       equ $184 ;can1 receiver flags
  303:          =00000185              can1rier:       equ $185 ;can1 receiver interrupt enables
  304:          =00000186              can1tflg:       equ $186 ;can1 transmit flags
  305:          =00000187              can1tier:       equ $187 ;can1 transmit interrupt enables
  306:          =00000188              can1tarq:       equ $188 ;can1 transmit message abort control
  307:          =00000189              can1taak:       equ $189 ;can1 transmit message abort status
  308:          =0000018A              can1tbel:       equ $18a ;can1 transmit buffer select
  309:          =0000018B              can1idac:       equ $18b ;can1 identfier acceptance control
  310:                                 
  311:          =0000018E              can1rerr:       equ $18e ;can1 receive error counter
  312:          =0000018F              can1terr:       equ $18f ;can1 transmit error counter
  313:          =00000190              can1ida0:       equ $190 ;can1 identifier acceptance register 0
  314:          =00000191              can1ida1:       equ $191 ;can1 identifier acceptance register 1
  315:          =00000192              can1ida2:       equ $192 ;can1 identifier acceptance register 2
  316:          =00000193              can1ida3:       equ $193 ;can1 identifier acceptance register 3
  317:          =00000194              can1idm0:       equ $194 ;can1 identifier mask register 0
  318:          =00000195              can1idm1:       equ $195 ;can1 identifier mask register 1
  319:          =00000196              can1idm2:       equ $196 ;can1 identifier mask register 2
  320:          =00000197              can1idm3:       equ $197 ;can1 identifier mask register 3
  321:          =00000198              can1ida4:       equ $198 ;can1 identifier acceptance register 4
  322:          =00000199              can1ida5:       equ $199 ;can1 identifier acceptance register 5
  323:          =0000019A              can1ida6:       equ $19a ;can1 identifier acceptance register 6
  324:          =0000019B              can1ida7:       equ $19b ;can1 identifier acceptance register 7
  325:          =0000019C              can1idm4:       equ $19c ;can1 identifier mask register 4
  326:          =0000019D              can1idm5:       equ $19d ;can1 identifier mask register 5
  327:          =0000019E              can1idm6:       equ $19e ;can1 identifier mask register 6
  328:          =0000019F              can1idm7:       equ $19f ;can1 identifier mask register 7
  329:          =000001A0              can1rxfg:       equ $1a0 ;can1 rx foreground buffer thru +$1af
  330:          =000001B0              can1txfg:       equ $1b0 ;can1 tx foreground buffer thru +$1bf
  331:                                 
  332:          =000001C0              can2ctl0:       equ $1c0 ;can2 control register 0
  333:          =000001C1              can2ctl1:       equ $1c1 ;can2 control register 1
  334:          =000001C2              can2btr0:       equ $1c2 ;can2 bus timing register 0
  335:          =000001C3              can2btr1:       equ $1c3 ;can2 bus timing register 1
  336:          =000001C4              can2rflg:       equ $1c4 ;can2 receiver flags
  337:          =000001C5              can2rier:       equ $1c5 ;can2 receiver interrupt enables
  338:          =000001C6              can2tflg:       equ $1c6 ;can2 transmit flags
  339:          =000001C7              can2tier:       equ $1c7 ;can2 transmit interrupt enables
  340:          =000001C8              can2tarq:       equ $1c8 ;can2 transmit message abort control
  341:          =000001C9              can2taak:       equ $1c9 ;can2 transmit message abort status
  342:          =000001CA              can2tbel:       equ $1ca ;can2 transmit buffer select
  343:          =000001CB              can2idac:       equ $1cb ;can2 identfier acceptance control
  344:                                 
  345:          =000001CE              can2rerr:       equ $1ce ;can2 receive error counter
  346:          =000001CF              can2terr:       equ $1cf ;can2 transmit error counter
  347:          =000001D0              can2ida0:       equ $1d0 ;can2 identifier acceptance register 0
  348:          =000001D1              can2ida1:       equ $1d1 ;can2 identifier acceptance register 1
  349:          =000001D2              can2ida2:       equ $1d2 ;can2 identifier acceptance register 2
  350:          =000001D3              can2ida3:       equ $1d3 ;can2 identifier acceptance register 3
  351:          =000001D4              can2idm0:       equ $1d4 ;can2 identifier mask register 0
  352:          =000001D5              can2idm1:       equ $1d5 ;can2 identifier mask register 1
  353:          =000001D6              can2idm2:       equ $1d6 ;can2 identifier mask register 2
  354:          =000001D7              can2idm3:       equ $1d7 ;can2 identifier mask register 3
  355:          =000001D8              can2ida4:       equ $1d8 ;can2 identifier acceptance register 4
  356:          =000001D9              can2ida5:       equ $1d9 ;can2 identifier acceptance register 5
  357:          =000001DA              can2ida6:       equ $1da ;can2 identifier acceptance register 6
  358:          =000001DB              can2ida7:       equ $1db ;can2 identifier acceptance register 7
  359:          =000001DC              can2idm4:       equ $1dc ;can2 identifier mask register 4
  360:          =000001DD              can2idm5:       equ $1dd ;can2 identifier mask register 5
  361:          =000001DE              can2idm6:       equ $1de ;can2 identifier mask register 6
  362:          =000001DF              can2idm7:       equ $1df ;can2 identifier mask register 7
  363:          =000001E0              can2rxfg:       equ $1e0 ;can2 rx foreground buffer thru +$1ef
  364:          =000001F0              can2txfg:       equ $1f0 ;can2 tx foreground buffer thru +$1ff
  365:                                 
  366:          =00000200              can3ctl0:       equ $200 ;can3 control register 0
  367:          =00000201              can3ctl1:       equ $201 ;can3 control register 1
  368:          =00000202              can3btr0:       equ $202 ;can3 bus timing register 0
  369:          =00000203              can3btr1:       equ $203 ;can3 bus timing register 1
  370:          =00000204              can3rflg:       equ $204 ;can3 receiver flags
  371:          =00000205              can3rier:       equ $205 ;can3 receiver interrupt enables
  372:          =00000206              can3tflg:       equ $206 ;can3 transmit flags
  373:          =00000207              can3tier:       equ $207 ;can3 transmit interrupt enables
  374:          =00000208              can3tarq:       equ $208 ;can3 transmit message abort control
  375:          =00000209              can3taak:       equ $209 ;can3 transmit message abort status
  376:          =0000020A              can3tbel:       equ $20a ;can3 transmit buffer select
  377:          =0000020B              can3idac:       equ $20b ;can3 identfier acceptance control
  378:                                 
  379:          =0000020E              can3rerr:       equ $20e ;can3 receive error counter
  380:          =0000020F              can3terr:       equ $20f ;can3 transmit error counter
  381:          =00000210              can3ida0:       equ $210 ;can3 identifier acceptance register 0
  382:          =00000211              can3ida1:       equ $211 ;can3 identifier acceptance register 1
  383:          =00000212              can3ida2:       equ $212 ;can3 identifier acceptance register 2
  384:          =00000213              can3ida3:       equ $213 ;can3 identifier acceptance register 3
  385:          =00000214              can3idm0:       equ $214 ;can3 identifier mask register 0
  386:          =00000215              can3idm1:       equ $215 ;can3 identifier mask register 1
  387:          =00000216              can3idm2:       equ $216 ;can3 identifier mask register 2
  388:          =00000217              can3idm3:       equ $217 ;can3 identifier mask register 3
  389:          =00000218              can3ida4:       equ $218 ;can3 identifier acceptance register 4
  390:          =00000219              can3ida5:       equ $219 ;can3 identifier acceptance register 5
  391:          =0000021A              can3ida6:       equ $21a ;can3 identifier acceptance register 6
  392:          =0000021B              can3ida7:       equ $21b ;can3 identifier acceptance register 7
  393:          =0000021C              can3idm4:       equ $21c ;can3 identifier mask register 4
  394:          =0000021D              can3idm5:       equ $21d ;can3 identifier mask register 5
  395:          =0000021E              can3idm6:       equ $21e ;can3 identifier mask register 6
  396:          =0000021F              can3idm7:       equ $21f ;can3 identifier mask register 7
  397:          =00000220              can3rxfg:       equ $220 ;can3 rx foreground buffer thru +$22f
  398:          =00000230              can3txfg:       equ $230 ;can3 tx foreground buffer thru +$23f
  399:                                 
  400:          =00000240              ptt:            equ $240 ;portt data register
  401:          =00000241              ptit:           equ $241 ;portt input register
  402:          =00000242              ddrt:           equ $242 ;portt direction register
  403:          =00000243              rdrt:           equ $243 ;portt reduced drive register
  404:          =00000244              pert:           equ $244 ;portt pull device enable
  405:          =00000245              ppst:           equ $245 ;portt pull polarity select
  406:                                 
  407:          =00000248              pts:            equ $248 ;ports data register
  408:          =00000249              ptis:           equ $249 ;ports input register
  409:          =0000024A              ddrs:           equ $24a ;ports direction register
  410:          =0000024B              rdrs:           equ $24b ;ports reduced drive register
  411:          =0000024C              pers:           equ $24c ;ports pull device enable
  412:          =0000024D              ppss:           equ $24d ;ports pull polarity select
  413:          =0000024E              woms:           equ $24e ;ports wired or mode register
  414:                                 
  415:          =00000250              ptm:            equ $250 ;portm data register
  416:          =00000251              ptim:           equ $251 ;portm input register
  417:          =00000252              ddrm:           equ $252 ;portm direction register
  418:          =00000253              rdrm:           equ $253 ;portm reduced drive register
  419:          =00000254              perm:           equ $254 ;portm pull device enable
  420:          =00000255              ppsm:           equ $255 ;portm pull polarity select
  421:          =00000256              womm:           equ $256 ;portm wired or mode register
  422:          =00000257              modrr:          equ $257 ;portm module routing register
  423:          =00000258              ptp:            equ $258 ;portp data register
  424:          =00000259              ptip:           equ $259 ;portp input register
  425:          =0000025A              ddrp:           equ $25a ;portp direction register
  426:          =0000025B              rdrp:           equ $25b ;portp reduced drive register
  427:          =0000025C              perp:           equ $25c ;portp pull device enable
  428:          =0000025D              ppsp:           equ $25d ;portp pull polarity select
  429:          =0000025E              piep:           equ $25e ;portp interrupt enable register
  430:          =0000025F              pifp:           equ $25f ;portp interrupt flag register
  431:          =00000260              pth:            equ $260 ;porth data register
  432:          =00000261              ptih:           equ $261 ;porth input register
  433:          =00000262              ddrh:           equ $262 ;porth direction register
  434:          =00000263              rdrh:           equ $263 ;porth reduced drive register
  435:          =00000264              perh:           equ $264 ;porth pull device enable
  436:          =00000265              ppsh:           equ $265 ;porth pull polarity select
  437:          =00000266              pieh:           equ $266 ;porth interrupt enable register
  438:          =00000267              pifh:           equ $267 ;porth interrupt flag register
  439:          =00000268              ptj:            equ $268 ;portj data register
  440:          =00000269              ptij:           equ $269 ;portj input register
  441:          =0000026A              ddrj:           equ $26a ;portj direction register
  442:          =0000026B              rdrj:           equ $26b ;portj reduced drive register
  443:          =0000026C              perj:           equ $26c ;portj pull device enable
  444:          =0000026D              ppsj:           equ $26d ;portj pull polarity select
  445:          =0000026E              piej:           equ $26e ;portj interrupt enable register
  446:          =0000026F              pifj:           equ $26f ;portj interrupt flag register
  447:                                 
  448:          =00000280              can4ctl0:       equ $280 ;can4 control register 0
  449:          =00000281              can4ctl1:       equ $281 ;can4 control register 1
  450:          =00000282              can4btr0:       equ $282 ;can4 bus timing register 0
  451:          =00000283              can4btr1:       equ $283 ;can4 bus timing register 1
  452:          =00000284              can4rflg:       equ $284 ;can4 receiver flags
  453:          =00000285              can4rier:       equ $285 ;can4 receiver interrupt enables
  454:          =00000286              can4tflg:       equ $286 ;can4 transmit flags
  455:          =00000287              can4tier:       equ $287 ;can4 transmit interrupt enables
  456:          =00000288              can4tarq:       equ $288 ;can4 transmit message abort control
  457:          =00000289              can4taak:       equ $289 ;can4 transmit message abort status
  458:          =0000028A              can4tbel:       equ $28a ;can4 transmit buffer select
  459:          =0000028B              can4idac:       equ $28b ;can4 identfier acceptance control
  460:                                 
  461:          =0000028E              can4rerr:       equ $28e ;can4 receive error counter
  462:          =0000028F              can4terr:       equ $28f ;can4 transmit error counter
  463:          =00000290              can4ida0:       equ $290 ;can4 identifier acceptance register 0
  464:          =00000291              can4ida1:       equ $291 ;can4 identifier acceptance register 1
  465:          =00000292              can4ida2:       equ $292 ;can4 identifier acceptance register 2
  466:          =00000293              can4ida3:       equ $293 ;can4 identifier acceptance register 3
  467:          =00000294              can4idm0:       equ $294 ;can4 identifier mask register 0
  468:          =00000295              can4idm1:       equ $295 ;can4 identifier mask register 1
  469:          =00000296              can4idm2:       equ $296 ;can4 identifier mask register 2
  470:          =00000297              can4idm3:       equ $297 ;can4 identifier mask register 3
  471:          =00000298              can4ida4:       equ $298 ;can4 identifier acceptance register 4
  472:          =00000299              can4ida5:       equ $299 ;can4 identifier acceptance register 5
  473:          =0000029A              can4ida6:       equ $29a ;can4 identifier acceptance register 6
  474:          =0000029B              can4ida7:       equ $29b ;can4 identifier acceptance register 7
  475:          =0000029C              can4idm4:       equ $29c ;can4 identifier mask register 4
  476:          =0000029D              can4idm5:       equ $29d ;can4 identifier mask register 5
  477:          =0000029E              can4idm6:       equ $29e ;can4 identifier mask register 6
  478:          =0000029F              can4idm7:       equ $29f ;can4 identifier mask register 7
  479:          =000002A0              can4rxfg:       equ $2a0 ;can4 rx foreground buffer thru +$2af
  480:          =000002B0              can4txfg:       equ $2b0 ;can4 tx foreground buffer thru +$2bf
  481:                                 
  482:                                 * end registers
   11:          =00001001              R1              equ     $1001
   12:          =00001002              R2              equ     $1002
   13:          =00001003              R3              equ     $1003
   14:          =00000032              lcd_dat         equ     PortK   ; LCD data pins (PK5~PK2)
   15:          =00000033              lcd_dir         equ     DDRK    ; LCD data direction port
   16:          =00000002              lcd_E           equ     $02             ; E signal pin
   17:          =00000001              lcd_RS          equ     $01             ; RS signal pin
   18:          =0000002E              dot             equ     $2E             ; ASCII code for decimal point 
   19:          =000000DF              degreeSymbol    equ     223     ; ASCII code for degree symbol
   20:          =00000043              letterC         equ     $43
   21:          =00000046              letterF         equ     $46
   22:          =0000004B              letterK         equ     $4B
   23:                                 
   24:          =00001000                              org     $1000
   25:     1000 +0001                  quotient        ds.b    1
   26:     1001 +0001                  remainder       ds.b    1
   27:     1002 +0001                  sign            ds.b    1
   28:     1003 +0001                  fractionalPart  ds.b    1
   29:     1004 +0008                  tempDisplay     ds.b    8       ; output string for LCD
   30:     100C +0001                  counter         rmb     1       ; counter for shifting display
   31:     100D +0001                  unitletter      rmb     1       ; stores the correct letter to display
   32:     100E +0001                  switches        rmb     1       ; stores if switch pressed or not, 1=C, 2=F, 3=K, -1=no button pressed
   33:                                 
   34:     100F 54 65 6D 70 65 72      msg1    dc.b    "Temperature:",0
           1015 61 74 75 72 65 3A 
           101B 00 
   35:     101C 56 61 6C 75 65 3A      msg2    dc.b    "Value:        ",0
           1022 20 20 20 20 20 20 
           1028 20 20 00 
   36:     102B 20 20 20 43 68 72      msg3    dc.b    "   Christopher Szynwald",0
           1031 69 73 74 6F 70 68 
           1037 65 72 20 53 7A 79 
           103D 6E 77 61 6C 64 00 
   37:     1043 20 20 20 44 49 50      msg4    dc.b    "   DIP1:C, DIP2:F, DIP3:K",0
           1049 31 3A 43 2C 20 44 
           104F 49 50 32 3A 46 2C 
           1055 20 44 49 50 33 3A 
           105B 4B 00 
   38:                                 
   39:          =00002000                      org     $2000           
   40:     2000 CF 2000                        lds     #$2000  
   41:     2003 16 21E1                        jsr     openLCD ; initialize the LCD
   42:     2006 CE 102B                        ldx     #msg3   ; point to the first line of message
   43:     2009 16 2235                        jsr     putsLCD ; display in the LCD screen
   44:     200C 86 C0                          ldaa    #$C0    ; move to the second row 
   45:     200E 16 21B3                        jsr     cmd2LCD ;       "
   46:     2011 CE 1043                        ldx     #msg4   ; point to the second line of message
   47:     2014 16 2235                        jsr     putsLCD
   48:                                 
   49:                                 ; here add instructions to shift the display to see the whole sentence,
   50:     2017 86 FF                          ldaa    #255    ;initialize counter
   51:     2019 7A 100C                        staa    counter ;
   52:     201C 86 FF                          ldaa    #-1     ;initialize button variable
   53:     201E 7A 100E                        staa    switches
   54:     2021 180B 00 0262                   movb    #$00, DDRH      ; set port H as input for pushbuttons
   55:                                 
   56:                                 ;STARTUP SEQUENCE
   57:     2026 86 18                  startup ldaa    #$18            ;display name and instructions during startup sequence
   58:     2028 16 21B3                        jsr     cmd2LCD
   59:     202B 16 2299                        jsr     lcddelay
   60:     202E 73 100C                        dec     counter
   61:     2031 16 203D                        jsr     pressed
   62:                                         
   63:     2034 86 00                          ldaa    #0      ;checking value of switch
   64:     2036 B1 100E                        cmpa    switches        ;compare switch value to 0
   65:     2039 2C EB                          bge     startup ;if switch<0 (not pressed yet) continue startup sequence
   66:     203B 20 36                          bra     begin   ;else, switch was pressed (SW3, SW4 or SW5)
   67:                                 
   68:                                 ;BUTTON PRESSED SUBROUTINE
   69:     203D 1E 0260 20 0C          pressed brset   PTH,$20,kelvin  ;check value of portH pins
   70:     2042 1E 0260 40 13                  brset   PTH,$40,farenheit       
   71:     2047 1E 0260 80 1A                  brset   PTH,$80,celsius
   72:     204C 20 24                          bra     done            ;if none pressed, switches value remains the same
   73:                                 
   74:     204E 86 4B                  kelvin  ldaa    #letterK                ;for kelvin, switch = 3
   75:     2050 7A 100D                        staa    unitletter
   76:     2053 86 03                          ldaa    #3
   77:     2055 7A 100E                        staa    switches
   78:     2058 20 18                          bra     done
   79:                                 
   80:     205A 86 46                  farenheit       ldaa    #letterF                ;for farenheit, switch = 2
   81:     205C 7A 100D                                staa    unitletter
   82:     205F 86 02                                  ldaa    #2
   83:     2061 7A 100E                                staa    switches
   84:     2064 20 0C                                  bra     done
   85:                                 
   86:     2066 86 43                  celsius ldaa    #letterC                ;for celsius, switch = 1
   87:     2068 7A 100D                        staa    unitletter
   88:     206B 86 01                          ldaa    #1
   89:     206D 7A 100E                        staa    switches
   90:     2070 20 00                          bra     done
   91:     2072 3D                     done    rts
   92:                                 
   93:                                 
   94:                                 ;BEGIN ADT CONVERSION
   95:     2073 180B 80 0082           begin   movb    #$80,ATD0CTL2   ; enable input for A/D conversion
   96:     2078 180B 08 0083                   movb    #$08,ATD0CTL3   ; 8-bit resolution, 16-clock for 2nd stage
   97:     207D 180B EB 0084                   movb    #$EB,ATD0CTL4   ; conversion frequency = 1MHz  
   98:     2082 20 00                          bra     H1
   99:                                 
  100:     2084 180B 05 0085           H1      movb    #$05,ATD0CTL5   ; chan 5 of ATD0 (use left-justified) 
  101:     2089 4F 86 80 FC            H2      brclr   ATD0STAT,$80,H2 ;       
  102:                                         
  103:                                 ; display on LCD continuously 
  104:                                 
  105:                                 ;ORDER OF SUBROUTINE CALLS
  106:     208D 16 20AB                        jsr     lcdLoop                  
  107:     2090 16 2098                        jsr     openAD0
  108:     2093 16 203D                        jsr     pressed  
  109:     2096 20 EC                          bra     H1              ; keep reading the ADC
  110:                                 
  111:     2098 180B E0 0082           openAD0 movb    #$E0,ATD0CTL2   ; normal ATD operation
  112:     209D 16 227B                        jsr     delay50us       ; wait for 50 us
  113:     20A0 180B 08 0083                   movb    #$08,ATD0CTL3   ; conversion, then freeze
  114:     20A5 180B EB 0084                   movb    #$EB,ATD0CTL4   ; 8-bit resolution, 1MHz clock rate
  115:     20AA 3D                             rts
  116:                                    
  117:     20AB 16 21E1                lcdLoop jsr     openLCD         ; initialize the LCD
  118:     20AE CE 100F                        ldx     #msg1           ; point to the first line of message
  119:     20B1 16 2235                        jsr     putsLCD         ; display in the LCD screen
  120:     20B4 86 C0                          ldaa    #$C0            ; move to the second row 
  121:     20B6 16 21B3                        jsr     cmd2LCD         ;       "
  122:     20B9 CE 101C                        ldx     #msg2           ; point to the second line of message
  123:     20BC 16 2235                        jsr     putsLCD
  124:     20BF 16 20C3                        jsr     storeValue
  125:     20C2 3D                             rts
  126:                                 
  127:     20C3 180B 20 1004           storeValue      movb    #$20,tempDisplay        ; initialize the buffer contents to "  0.0'C"           
  128:     20C8 180B 20 1005                           movb    #$20,tempDisplay+1      ; " "
  129:     20CD 180B 30 1006                           movb    #$30,tempDisplay+2      ; "0"   
  130:     20D2 180B 2E 1007                           movb    #dot,tempDisplay+3      ; "."   
  131:     20D7 180B 30 1008                           movb    #$30,tempDisplay+4      ; "0"   
  132:     20DC 180B DF 1009                           movb    #degreeSymbol,tempDisplay+5     ; degree character
  133:     20E1 180C 100D 100A                         movb    unitletter,tempDisplay+6        ; letter 'C' 
  134:     20E7 180B 00 100B                           movb    #0,tempDisplay+7                ; null character
  135:     20EC 180B 05 0085                           movb    #$05,ATD0CTL5           ; start an ATD conversion sequence
  136:     20F1 180B 00 1002                           movb    #0,sign                 ; initialize sign to positive
  137:     20F6 180B 30 1003                           movb    #$30,fractionalPart     ; initialize fractional digit to 0
  138:     20FB 4F 86 80 FC                            brclr   ATD0STAT,$80,*          ; wait for the conversion to complete
  139:     20FF B6 100E                                ldaa    switches
  140:     2102 81 01                                  cmpa    #1
  141:     2104 27 08                                  beq     c_convert
  142:     2106 81 02                                  cmpa    #2
  143:     2108 27 17                                  beq     f_convert
  144:     210A 81 03                                  cmpa    #3
  145:     210C 27 27                                  beq     k_convert
  146:                                 
  147:                                 ;CONVERT INTO PROPER UNITS
  148:     210E DC 90                  c_convert       ldd     ADR00H          ; read a conversion result
  149:     2110 CD 0002                                ldy     #2              ; compute result x 3 / 2
  150:     2113 13                                     emul                    ; multiply Y x D
  151:     2114 CE 0003                                ldx     #3              ; divide by 2
  152:     2117 11                                     ediv
  153:                                 
  154:     2118 7B 1001                                stab    remainder       ; save the remainder
  155:     211B B7 64                                  tfr     Y,D             ; transfer quotient to A
  156:     211D 8B 04                                  adda    #4              ; add temperature offset
  157:     211F 20 2F                                  bra     here             
  158:                                 
  159:     2121 DC 90                  f_convert       ldd     ADR00H
  160:     2123 CD 0012                                ldy     #18             ; compute result, (2/3) x (9/5) + 32
  161:     2126 13                                     emul                    ; multiply Y x D
  162:     2127 CE 000F                                ldx     #15             ; divide by 10
  163:     212A 11                                     ediv            
  164:                                                 
  165:     212B 49                                     lsrd
  166:     212C 7B 1001                                stab    remainder       ; save the remainder
  167:     212F B7 64                                  tfr     Y,D             ; transfer quotient to A
  168:     2131 8B 26                                  adda    #38             ; add temperature offset (4*(9/5)+32)
  169:     2133 20 1B                                  bra     here             
  170:                                 
  171:     2135 DC 90                  k_convert       ldd     ADR00H
  172:     2137 CD 0002                                ldy     #2
  173:     213A 13                                     emul
  174:     213B CE 0003                                ldx     #3
  175:     213E 11                                     ediv
  176:                                                         
  177:     213F 7B 1001                                stab    remainder       ;
  178:     2142 B7 64                                  tfr     Y,D             ;shift quotient into lower 4 bits in order to fit format
  179:     2144 7A 1000                                staa    quotient                ;
  180:     2147 F6 1000                                ldab    quotient                ;
  181:     214A 87                                     clra
  182:     214B C3 0115                                addd    #277            ;then add temperature offset (273+4)
  183:     214E 20 07                                  bra     here2           ;branch directly to ASCII conversion 
  184:                                 
  185:                                 ;DISPLAYING TEMP 
  186:     2150 7A 1000                here            staa    quotient                ;conversion sequence for celsius and farenheit
  187:     2153 F6 1000                                ldab    quotient
  188:     2156 87                                     clra
  189:                                 
  190:     2157 CE 000A                here2           ldx     #10             ; use repeated divide by 10 to separate
  191:     215A 1810                                   idiv                    ; integral digits
  192:     215C CB 30                                  addb    #$30
  193:     215E 7B 1006                                stab    tempDisplay+2           ; save the one's digit
  194:     2161 B7 54                                  tfr     X,D             ; transfer quotient to D
  195:     2163 D7                                     tstb                    ; is quo zero?
  196:     2164 27 1B                                  beq     add_fra         ; if integral part is 0, then add fraction digit
  197:     2166 CE 000A                                ldx     #10             ; separate the ten's digit
  198:     2169 1810                                   idiv
  199:     216B CB 30                                  addb    #$30            ; convert and store the ten's digit
  200:     216D 7B 1005                                stab    tempDisplay+1
  201:     2170 B7 54                                  tfr     X,D             ; test hundred's digit
  202:     2172 D7                                     tstb                    ; is quotient 0?
  203:     2173 27 0C                                  beq     add_fra         ; if yes, branch to add_fra
  204:     2175 CE 000A                                ldx     #10             ; otherwise, seperate the hundred's digit
  205:     2178 1810                                   idiv
  206:     217A CB 30                                  addb    #$30            ; convert and store the hundred's digit
  207:     217C 7B 1004                                stab    tempDisplay     ; hundreds digit is the largest digit possible for any unit given
  208:     217F 20 00                                  bra     add_fra
  209:                                 
  210:                                 ;ADD FRACTIONAL PART
  211:     2181 B6 1001                add_fra         ldaa    remainder
  212:     2184 8B 30                                  adda    #$30
  213:     2186 7A 1003                                staa    fractionalPart
  214:     2189 180C 1003 1008                         movb    fractionalPart,tempDisplay+4    ; insert fraction digit
  215:     218F B6 1002                                ldaa    sign            ; check the sign
  216:     2192 27 05                                  beq     out_it
  217:     2194 180B 2D 1004                           movb    #$2D,tempDisplay        ; when minus, add minus character
  218:     2199 86 C0                  out_it          ldaa    #$C0            ; set cursor to 2nd row
  219:     219B 16 21B3                                jsr     cmd2LCD
  220:     219E CE 101C                                ldx     #msg2           ; clear the 2nd row of the LCD  
  221:     21A1 16 2235                                jsr     putsLCD
  222:     21A4 86 C7                                  ldaa    #$C7            ; set LCD cursor position
  223:     21A6 16 21B3                                jsr     cmd2LCD         ;
  224:     21A9 CE 1004                                ldx     #tempDisplay            ; output the temperature string         
  225:     21AC 16 2235                                jsr     putsLCD         ;
  226:     21AF 16 227B                                jsr     delay50us 
  227:     21B2 3D                                     rts
  228:                                 
  229:                                 
  230:                                 ;LCD SCREEN SUBROUTINES
  231:                                 ; the command is contained in A when calling this subroutine from main program
  232:     21B3 36                     cmd2LCD         psha                    ; save the command in stack
  233:     21B4 4D 32 01                               bclr    lcd_dat, lcd_RS ; set RS=0 for IR => PTK0=0
  234:     21B7 4C 32 02                               bset    lcd_dat, lcd_E  ; set E=1 => PTK=1
  235:     21BA 84 F0                                  anda    #$F0            ; clear the lower 4 bits of the command
  236:     21BC 44                                     lsra                    ; shift the upper 4 bits to PTK5-2 to the 
  237:     21BD 44                                     lsra                    ; LCD data pins
  238:     21BE 8A 02                                  oraa    #$02            ; maintain RS=0 & E=1 after LSRA
  239:     21C0 5A 32                                  staa    lcd_dat         ; send the content of PTK to IR 
  240:     21C2 A7                                     nop                     ; delay for signal stability
  241:     21C3 A7                                     nop                     ;       
  242:     21C4 A7                                     nop                     ;       
  243:     21C5 4D 32 02                               bclr    lcd_dat,lcd_E   ; set E=0 to complete the transfer
  244:                                 
  245:     21C8 32                                     pula                    ; retrieve the LCD command from stack
  246:     21C9 84 0F                                  anda    #$0F            ; clear the lower four bits of the command
  247:     21CB 48                                     lsla                    ; shift the lower 4 bits to PTK5-2 to the
  248:     21CC 48                                     lsla                    ; LCD data pins
  249:     21CD 4C 32 02                               bset    lcd_dat, lcd_E  ; set E=1 => PTK=1
  250:     21D0 8A 02                                  oraa    #$02            ; maintain E=1 to PTK1 after LSLA
  251:     21D2 5A 32                                  staa    lcd_dat         ; send the content of PTK to IR
  252:     21D4 A7                                     nop                     ; delay for signal stability
  253:     21D5 A7                                     nop                     ;       
  254:     21D6 A7                                     nop                     ;       
  255:     21D7 4D 32 02                               bclr    lcd_dat,lcd_E   ; set E=0 to complete the transfer
  256:                                 
  257:     21DA CD 0001                                ldy     #1              ; adding this delay will complete the internal
  258:     21DD 16 227B                                jsr     delay50us       ; operation for most instructions
  259:     21E0 3D                                     rts
  260:                                 
  261:     21E1 180B FF 0033           openLCD         movb    #$FF,lcd_dir    ; configure Port K for output
  262:     21E6 CD 0002                                ldy     #2              ; wait for LCD to be ready
  263:     21E9 16 225D                                jsr     delay100ms      ;      "
  264:     21EC 86 28                                  ldaa    #$28            ; set 4-bit data, 2-line display
  265:     21EE 16 21B3                                jsr     cmd2lcd         ;       "       
  266:     21F1 86 0F                                  ldaa    #$0F            ; turn on display, cursor, and blinking
  267:     21F3 16 21B3                                jsr     cmd2lcd         ;       "
  268:     21F6 86 06                                  ldaa    #$06            ; move cursor right (entry mode set instruction)
  269:     21F8 16 21B3                                jsr     cmd2lcd         ;       "
  270:     21FB 86 01                                  ldaa    #$01            ; clear display screen and return to home position
  271:     21FD 16 21B3                                jsr     cmd2lcd         ;       "
  272:     2200 CD 0002                                ldy     #2              ; wait until clear display command is complete
  273:     2203 16 223F                                jsr     delay1ms        ;       "
  274:     2206 3D                                     rts     
  275:                                 
  276:                                 ; The character to be output is in accumulator A.
  277:     2207 36                     putcLCD         psha                    ; save a copy of the chasracter
  278:     2208 4C 32 01                               bset    lcd_dat,lcd_RS  ; set RS=1 for data register => PK0=1
  279:     220B 4C 32 02                               bset    lcd_dat,lcd_E   ; set E=1 => PTK=1
  280:     220E 84 F0                                  anda    #$F0            ; clear the lower 4 bits of the character
  281:     2210 44                                     lsra                    ; shift the upper 4 bits to PTK5-2 to the
  282:     2211 44                                     lsra                    ; LCD data pins
  283:     2212 8A 03                                  oraa    #$03            ; maintain RS=1 & E=1 after LSRA
  284:     2214 5A 32                                  staa    lcd_dat         ; send the content of PTK to DR
  285:     2216 A7                                     nop                     ; delay for signal stability
  286:     2217 A7                                     nop                     ;      
  287:     2218 A7                                     nop                     ;     
  288:     2219 4D 32 02                               bclr    lcd_dat,lcd_E   ; set E=0 to complete the transfer
  289:                                 
  290:     221C 32                                     pula                    ; retrieve the character from the stack
  291:     221D 84 0F                                  anda    #$0F            ; clear the upper 4 bits of the character
  292:     221F 48                                     lsla                    ; shift the lower 4 bits to PTK5-2 to the
  293:     2220 48                                     lsla                    ; LCD data pins
  294:     2221 4C 32 02                               bset    lcd_dat,lcd_E   ; set E=1 => PTK=1
  295:     2224 8A 03                                  oraa    #$03            ; maintain RS=1 & E=1 after LSLA
  296:     2226 5A 32                                  staa    lcd_dat         ; send the content of PTK to DR
  297:     2228 A7                                     nop                     ; delay for signal stability
  298:     2229 A7                                     nop                     ;
  299:     222A A7                                     nop                     ;
  300:     222B 4D 32 02                               bclr    lcd_dat,lcd_E   ; set E=0 to complete the transfer
  301:                                 
  302:     222E CD 0001                                ldy     #1              ; wait until the write operation is complete
  303:     2231 16 227B                                jsr     delay50us       ; 
  304:     2234 3D                                     rts
  305:                                 
  306:     2235 A6 30                  putsLCD         ldaa    1,X+            ; get one character from the string
  307:     2237 27 05                                  beq     donePS  ; reach NULL character?
  308:     2239 16 2207                                jsr     putcLCD
  309:     223C 20 F7                                  bra     putsLCD
  310:     223E 3D                     donePS          rts 
  311:                                 
  312:                                 
  313:                                 ;DELAY SUBROUTINES 
  314:     223F 180B 90 0046           delay1ms        movb    #$90,TSCR       ; enable TCNT & fast flags clear
  315:     2244 180B 06 004D                           movb    #$06,TMSK2      ; configure prescale factor to 64
  316:     2249 4C 40 01                               bset    TIOS,$01                ; enable OC0
  317:     224C DC 44                                  ldd     TCNT
  318:     224E C3 0177                again0          addd    #375            ; start an output compare operation
  319:     2251 5C 50                                  std     TC0             ; with 50 ms time delay
  320:     2253 4F 4E 01 FC            wait_lp0        brclr   TFLG1,$01,wait_lp0
  321:     2257 DC 50                                  ldd     TC0
  322:     2259 04 36 F2                               dbne    y,again0
  323:     225C 3D                                     rts
  324:                                 
  325:     225D 180B 90 0046           delay100ms      movb    #$90,TSCR       ; enable TCNT & fast flags clear
  326:     2262 180B 06 004D                           movb    #$06,TMSK2      ; configure prescale factor to 64
  327:     2267 4C 40 01                               bset    TIOS,$01        ; enable OC0
  328:     226A DC 44                                  ldd     TCNT
  329:     226C C3 927C                again1          addd    #37500          ; start an output compare operation
  330:     226F 5C 50                                  std     TC0             ; with 50 ms time delay
  331:     2271 4F 4E 01 FC            wait_lp1        brclr   TFLG1,$01,wait_lp1
  332:     2275 DC 50                                  ldd     TC0
  333:     2277 04 36 F2                               dbne    y,again1
  334:     227A 3D                                     rts
  335:                                 
  336:     227B 180B 90 0046           delay50us       movb    #$90,TSCR       ; enable TCNT & fast flags clear
  337:     2280 180B 06 004D                           movb    #$06,TMSK2      ; configure prescale factor to 64
  338:     2285 4C 40 01                               bset    TIOS,$01        ; enable OC0
  339:     2288 DC 44                                  ldd     TCNT
  340:     228A C3 000F                again2          addd    #15             ; start an output compare operation
  341:     228D 5C 50                                  std     TC0             ; with 50 ms time delay
  342:     228F 4F 4E 01 FC            wait_lp2        brclr   TFLG1,$01,wait_lp2
  343:     2293 DC 50                                  ldd     TC0
  344:     2295 04 36 F2                               dbne    y,again2
  345:     2298 3D                                     rts
  346:                                 
  347:                                 
  348:     2299 C6 40                  lcddelay        ldab    #$40    ;       
  349:     229B CE FFFF                delay1          ldx     #$FFFF  ;       
  350:     229E 04 35 FD               delay2          dbne    x,delay2;       
  351:     22A1 04 31 F7                               dbne    b,delay1;       
  352:     22A4 3D                                     rts
  353:                                   
  354:                                                 end

Symbols:
add_fra                         *00002181
adr00h                          *00000090
again0                          *0000224e
again1                          *0000226c
again2                          *0000228a
atd0ctl2                        *00000082
atd0ctl3                        *00000083
atd0ctl4                        *00000084
atd0ctl5                        *00000085
atd0stat                        *00000086
begin                           *00002073
c_convert                       *0000210e
celsius                         *00002066
cmd2lcd                         *000021b3
counter                         *0000100c
ddrh                            *00000262
ddrk                            *00000033
degreesymbol                    *000000df
delay1                          *0000229b
delay100ms                      *0000225d
delay1ms                        *0000223f
delay2                          *0000229e
delay50us                       *0000227b
done                            *00002072
doneps                          *0000223e
dot                             *0000002e
f_convert                       *00002121
farenheit                       *0000205a
fractionalpart                  *00001003
h1                              *00002084
h2                              *00002089
here                            *00002150
here2                           *00002157
k_convert                       *00002135
kelvin                          *0000204e
lcd_dat                         *00000032
lcd_dir                         *00000033
lcd_e                           *00000002
lcd_rs                          *00000001
lcddelay                        *00002299
lcdloop                         *000020ab
letterc                         *00000043
letterf                         *00000046
letterk                         *0000004b
msg1                            *0000100f
msg2                            *0000101c
msg3                            *0000102b
msg4                            *00001043
openad0                         *00002098
openlcd                         *000021e1
out_it                          *00002199
portk                           *00000032
pressed                         *0000203d
pth                             *00000260
putclcd                         *00002207
putslcd                         *00002235
quotient                        *00001000
remainder                       *00001001
sign                            *00001002
startup                         *00002026
storevalue                      *000020c3
switches                        *0000100e
tc0                             *00000050
tcnt                            *00000044
tempdisplay                     *00001004
tflg1                           *0000004e
tios                            *00000040
tmsk2                           *0000004d
tscr                            *00000046
unitletter                      *0000100d
wait_lp0                        *00002253
wait_lp1                        *00002271
wait_lp2                        *0000228f

